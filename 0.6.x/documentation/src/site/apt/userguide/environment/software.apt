 -----
 Software
 -----
 -----
 -----

~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements.  See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership.  The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/doxia/references/apt-format.html

Software

  Software allows you to define a generic update plan that will be used to update any kind of application.
  It's a very flexible way to update applications, whatever kind of application it is.

[/images/software.png]

  A software is identified by a name (for instance "My Custom Application").

[/images/software_general.png]

  As for other resources, a software could be active (it's part of the whole environment update) or passive (it won't be
  updated during an environment update).

  It could be an update blocker (if the software update fails, the whole environment update process is stopped in error),
  or not update blocker (if the software update fails, just a warning is raised and the whole environment update continue).

  You can chose to update a software before or after the JavaEE resources update.

  Optionally, you can define an "base" software URI. This URI is used as base in the software resources that use relative
  URI.

[/images/software_update_plan.png]

  A software update is defined by an "update plan". An update plan is a set of steps, each steps update a given resource
  (an "update unit").

  On each "update unit", as for other resources, you can define:

  * if the unit is active or not

  * if the unit is update blocker

  * if the update of the unit should be delegated to specific agent

  You have 4 "update units" available:

  * "location" allows you to download, uncompress, copy files and directories on the system (where the agent is running).
  You define a "source" URI (for instance tgz:http://host:port/myapp/archive.tar.gz!/inside/archive/file) and a "target"
  URI (for instance /path/to/file). If you use relative URI, Kalumet will use the software URI as base.

  * "command" allows you to execute local command on the system (where the agent is running). For instance, it allows you
  to stop or start an application, execute specific system scripts, etc.

  * "configuration file" allows you to download, copy files and apply regex substitution on the file content (using mappings).
  The source and target URI are the same as in "location". The mappings are defined using key (regex pattern)/value.

  * "database" allows you to use JDBC or system command to execute SQL scripts on a database (in order to update a database structure
  or "refresh" the database content). You can use mappings on the SQL scripts (for instance to change some tablespace name, or table name, etc).
  Take a look on the JavaEE application database documentation for details.



